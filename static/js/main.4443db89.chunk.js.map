{"version":3,"sources":["trivia.png","services/api.js","redux/actions/actionTypes.js","components/Counter.jsx","redux/actions/index.js","pages/Login.jsx","pages/Config.jsx","pages/NotFound.jsx","components/Header.jsx","components/Button.jsx","components/AnswerButtons.js","components/Question.jsx","pages/Trivia.jsx","components/PlayAgainButton.jsx","components/RankingButton.js","pages/Feedback.jsx","components/Rank.js","pages/Ranking.jsx","serviceWorker.js","redux/reducers/configReducer.js","redux/reducers/questionsReducer.js","redux/reducers/userScoreReducer.js","redux/reducers/index.js","redux/store/index.js","index.js","App.js"],"names":["module","exports","requestToken","a","async","fetch","request","json","resolvedToken","localStorage","setItem","JSON","stringify","token","console","log","getCategoryID","whichCategory","categoriesData","categories","trivia_categories","filtered","find","category","name","includes","id","getQuestions","nQuestions","cat","catID","definedCategory","TRIVIA_ENDPOINT","data","timer","actypes","SET_NUMBER_OF_QUESTION","SAVE_QUESTIONS_ON_STORE","ADD_TIMER","actions","addNumberOfQuestions","numberOfQuestions","type","saveQuestionsOnStore","questions","addTimer","Login","props","state","email","isButtonDisabled","handleChange","bind","handleLogin","handleNewToken","getItem","parse","this","numQuestions","saveQuestions","history","FAILED_RESPONSE_CODE","userToken","getTokenFromLocalStorage","response_code","results","obj","player","assertions","score","gravatarEmail","push","newQuestions","setState","whichInput","target","value","toggleSendButton","className","to","data-testid","src","logo","alt","placeholder","onChange","disabled","onClick","Component","connect","configReducer","dispatch","Config","dispatchQuestions","hidden","numOfQuestions","NotFound","Header","img","playerName","initialState","count","Counter","startTimer","resetCount","prevProps","showResults","isRunning","clearInterval","counter","setInterval","countUpdate","Button","index","answerType","handleAnswer","isDisabled","element","AnswerButtons","event","pontuacao","scoreUpdate","Number","difficulty","currentTimer","checkDif","dif","answers","correctAnswer","map","el","key","e","checkAnswer","userScoreReducer","Question","isCounterRunning","disableButton","enableButton","resetColor","setAnswers","disableCounter","enableCounter","nextButton","setCounter","question","number","incorrectAnswers","some","shuffleArray","prevState","array","i","length","j","Math","floor","random","temp","wrongAnswers","document","querySelectorAll","querySelector","style","border","showButton","getElementById","display","nextQuestion","hideButton","unescape","Trivia","imagemGravatar","idQuestion","handleEmail","addQuestionsToState","md5","toString","currentQuestion","undefined","ranking","d","correctAnswers","correct_answer","incorrect_answers","defaultProps","questionsReducer","triviaQuestions","PlayAgainButton","RankingButton","Feedback","feedbackMessage","gravatar","Rank","Ranking","nome","Boolean","window","location","hostname","match","action","INITIAL_STATE","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Cypress","ReactDOM","render","exact","path","component","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4443db89.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";","export async function requestToken() {\n  const TOKEN_ENDPOINT = 'https://opentdb.com/api_token.php?command=request';\n  try {\n    const request = await fetch(TOKEN_ENDPOINT);\n    const resolvedToken = await request.json();\n    localStorage.setItem('token', JSON.stringify(resolvedToken.token));\n    return resolvedToken.token;\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nexport async function getCategoryID(whichCategory) {\n  const CATEGORIES_ENDPOINT = 'https://opentdb.com/api_category.php';\n  try {\n    const categoriesData = await fetch(CATEGORIES_ENDPOINT);\n    const { trivia_categories: categories } = await categoriesData.json();\n    const filtered = categories.find((category) => category.name.includes(whichCategory));\n    return filtered.id;\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nexport async function getQuestions(nQuestions, cat = '', token) {\n  const catID = await getCategoryID(cat);\n  const definedCategory = cat ? `&category=${catID}` : '';\n  const TRIVIA_ENDPOINT = `https://opentdb.com/api.php?amount=${nQuestions}${definedCategory}&token=${token}`;\n  try {\n    const data = await fetch(TRIVIA_ENDPOINT);\n    const json = await data.json();\n    return json;\n  } catch (error) {\n    console.log(error);\n  }\n}\n","const actypes = {\n  SET_NUMBER_OF_QUESTION: 'SET_NUMBER_OF_QUESTION',\n  SAVE_QUESTIONS_ON_STORE: 'SAVE_QUESTIONS_ON_STORE',\n  // ADD_SCORE: 'ADD_SCORE',\n  ADD_TIMER: 'ADD_TIMER',\n};\n\nexport default actypes;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport actions from '../redux/actions';\n\nconst initialState = {\n  count: 30,\n};\nlet timer;\nclass Counter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ...initialState,\n    };\n    this.startTimer = this.startTimer.bind(this);\n    this.resetCount = this.resetCount.bind(this);\n  }\n\n  componentDidMount() {\n    this.startTimer();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { showResults, isRunning } = this.props;\n    const MIN_SECONDS = 0;\n    const { count } = this.state;\n    if (count === MIN_SECONDS) {\n      clearInterval(timer);\n      this.resetCount();\n      showResults();\n    } else if (prevProps.isRunning !== isRunning) {\n      if (isRunning) {\n        clearInterval(timer);\n        // counter(count);\n        this.resetCount();\n      } else {\n        // counter(count);\n        this.startTimer();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(timer);\n  }\n\n  startTimer() {\n    const { counter } = this.props;\n    const INTERVAL = 1000;\n    timer = setInterval(() => {\n      const { count } = this.state;\n      const countUpdate = count - 1;\n      counter(countUpdate);\n      this.setState(() => ({\n        count: countUpdate,\n      }));\n    }, INTERVAL);\n  }\n\n  resetCount() {\n    this.setState({ count: initialState.count });\n  }\n\n  render() {\n    const { count } = this.state;\n    const { isRunning } = this.props;\n    return (\n      isRunning && <h1>{ count }</h1>\n    );\n  }\n}\n\nCounter.propTypes = {\n  showResults: PropTypes.func.isRequired,\n  isRunning: PropTypes.bool.isRequired,\n  counter: PropTypes.func.isRequired,\n};\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    counter: (counter) => dispatch(actions.addTimer(counter)),\n  };\n}\n\nexport default connect(null, mapDispatchToProps)(Counter);\n","import actypes from './actionTypes';\n\nconst actions = {\n  addNumberOfQuestions: (numberOfQuestions) => ({\n    type: actypes.SET_NUMBER_OF_QUESTION,\n    numberOfQuestions,\n  }),\n\n  saveQuestionsOnStore: (questions) => ({\n    type: actypes.SAVE_QUESTIONS_ON_STORE,\n    questions }),\n\n  // addScore: (score) => ({\n  //   type: actypes.ADD_SCORE,\n  //   score,\n  // }),\n  addTimer: (timer) => ({\n    type: actypes.ADD_TIMER,\n    timer,\n  }),\n\n};\nexport default actions;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { BsGear } from 'react-icons/bs';\nimport '../App.css';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport logo from '../trivia.png';\nimport { requestToken, getQuestions } from '../services/api';\nimport actions from '../redux/actions';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      email: '',\n      isButtonDisabled: true,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleLogin = this.handleLogin.bind(this);\n    this.handleNewToken = this.handleNewToken.bind(this);\n  }\n\n  getTokenFromLocalStorage() {\n    const token = localStorage.getItem('token');\n    return JSON.parse(token);\n  }\n\n  async handleLogin() {\n    const { numQuestions, saveQuestions, history } = this.props;\n    const { email, name } = this.state;\n    const FAILED_RESPONSE_CODE = 3;\n    let userToken = this.getTokenFromLocalStorage();\n    if (!userToken) userToken = await requestToken();\n    let questions = await getQuestions(numQuestions, '', userToken);\n    if (questions.response_code === FAILED_RESPONSE_CODE) {\n      questions = await this.handleNewToken(numQuestions);\n    }\n    // console.log(questions.results);\n    saveQuestions(questions.results);\n    const obj = { player: { name, assertions: 0, score: 0, gravatarEmail: email } };\n    localStorage.setItem('state', JSON.stringify(obj));\n    history.push('/jogo');\n  }\n\n  async handleNewToken(numQuestions) {\n    const token = await requestToken();\n    const newQuestions = await getQuestions(numQuestions, '', token);\n    return newQuestions;\n  }\n\n  toggleSendButton() {\n    const { email, name } = this.state;\n    if (email && name) {\n      this.setState({ isButtonDisabled: false });\n    } else {\n      this.setState({ isButtonDisabled: true });\n    }\n  }\n\n  handleChange(whichInput) {\n    const { value, id } = whichInput.target;\n    if (value || value === '') {\n      this.setState({\n        [id]: value,\n      }, () => this.toggleSendButton());\n    }\n  }\n\n  render() {\n    const { isButtonDisabled } = this.state;\n    return (\n      <main className=\"main-div\">\n        <div className=\"login-div\">\n          <div className=\"config-div\">\n            <Link to=\"/config\" data-testid=\"btn-settings\">\n              <BsGear />\n            </Link>\n          </div>\n          <div className=\"login-title\">\n            <img src={ logo } alt=\"\" />\n          </div>\n          <form className=\"form-div\">\n            <input\n              type=\"text\"\n              placeholder=\"Nome\"\n              name=\"name\"\n              id=\"name\"\n              data-testid=\"input-player-name\"\n              onChange={ this.handleChange }\n            />\n            <input\n              id=\"email\"\n              name=\"email\"\n              type=\"email\"\n              placeholder=\"Email\"\n              data-testid=\"input-gravatar-email\"\n              onChange={ this.handleChange }\n            />\n            {/* <Link to=\"/jogo\"> */}\n            <button\n              type=\"button\"\n              data-testid=\"btn-play\"\n              disabled={ isButtonDisabled }\n              onClick={ this.handleLogin }\n            >\n              Jogar\n            </button>\n            {/* </Link> */}\n          </form>\n        </div>\n      </main>\n    );\n  }\n}\n\nLogin.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n  numQuestions: PropTypes.number.isRequired,\n  saveQuestions: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  numQuestions: state.configReducer.numberOfQuestions,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveQuestions: (questions) => dispatch(actions.saveQuestionsOnStore(questions)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { BiArrowBack } from 'react-icons/bi';\nimport actions from '../redux/actions/index';\n\nclass Config extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      numberOfQuestions: 5,\n    };\n  }\n\n  componentDidMount() {\n    const { dispatchQuestions } = this.props;\n    const { numberOfQuestions } = this.state;\n\n    dispatchQuestions(numberOfQuestions);\n  }\n\n  render() {\n    return (\n      <main className=\"main-config-div\">\n        <div className=\"configs-div\">\n          <div className=\"voltar-div\">\n            <Link to=\"/\">\n              <BiArrowBack />\n              <span>Voltar</span>\n            </Link>\n          </div>\n          <div className=\"login-title\">\n            <h2 data-testid=\"settings-title\">Configurações</h2>\n          </div>\n          <div className=\"form-div\">\n            <select name=\"\" id=\"\">\n              <option value=\"\" hidden>Número de Questões</option>\n              <option value=\"\">5</option>\n              <option value=\"\">10</option>\n              <option value=\"\">15</option>\n            </select>\n            <select name=\"\" id=\"\">\n              <option value=\"\" hidden>Categoria</option>\n              <option value=\"\">Video-Game</option>\n              <option value=\"\">Programação</option>\n            </select>\n            <select name=\"\" id=\"\">\n              <option value=\"\" hidden>Dificuldade</option>\n              <option value=\"\">Fácil</option>\n              <option value=\"\">Intermediário</option>\n              <option value=\"\">Difícil</option>\n            </select>\n            {/* Futuramente podemos salvar toda a configuração quando a pessoa\n             clicar neste botão */}\n            <button\n              type=\"button\"\n              data-testid=\"btn-play\"\n            >\n              Salvar\n            </button>\n          </div>\n        </div>\n      </main>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchQuestions: (numOfQuestions) => dispatch(\n    actions.addNumberOfQuestions(numOfQuestions),\n  ),\n});\n\nexport default connect(null, mapDispatchToProps)(Config);\n\nConfig.propTypes = {\n  dispatchQuestions: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return (\n      <span>\n        404 NOT FOUND\n      </span>\n    );\n  }\n}\n\nexport default NotFound;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Header extends Component {\n  render() {\n    const { img, playerName, score } = this.props;\n    return (\n      <div className=\"trivia-header\">\n        <div className=\"img-name-points-div\">\n          <div className=\"img-name-div\">\n            <img\n              data-testid=\"header-profile-picture\"\n              src={ img }\n              alt=\"Avatar\"\n            />\n            <p>\n              Jogador:\n              <span data-testid=\"header-player-name\">{ playerName }</span>\n            </p>\n          </div>\n          <div className=\"points-div\">\n            <p>\n              Pontos:\n              <span data-testid=\"header-score\">{ score }</span>\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nHeader.propTypes = {\n  img: PropTypes.string.isRequired,\n  playerName: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n};\n\nexport default Header;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class Button extends Component {\n  render() {\n    const { index, answerType, handleAnswer, isDisabled, element } = this.props;\n    const cor = 'correct-answer';\n    return (\n      <button\n        type=\"button\"\n        data-testid={ answerType === cor ? answerType : `${answerType}-${index}` }\n        className={ answerType }\n        onClick={ handleAnswer }\n        disabled={ isDisabled }\n      >\n        {element}\n      </button>\n    );\n  }\n}\n\nButton.propTypes = {\n  index: PropTypes.number.isRequired,\n  answerType: PropTypes.string.isRequired,\n  handleAnswer: PropTypes.func.isRequired,\n  isDisabled: PropTypes.bool.isRequired,\n  element: PropTypes.string.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Button from './Button';\n\nclass AnswerButtons extends Component {\n  checkAnswer(event) {\n    const { showResults } = this.props;\n    // console.log(event.target);\n    const { className } = event.target;\n    console.log(className);\n    const n = 10;\n    if (className === 'correct-answer') {\n      const pontuacao = JSON.parse(localStorage.getItem('state')).player;\n      const assertions = pontuacao.assertions + 1;\n      let scoreUpdate = Number(pontuacao.score);\n      const { difficulty, currentTimer } = this.props;\n      scoreUpdate += n + (currentTimer * this.checkDif(difficulty));\n      const player = { ...pontuacao, score: scoreUpdate, assertions };\n      localStorage\n        .setItem('state', JSON.stringify({ player }));\n    }\n    showResults();\n  }\n\n  checkDif(dif) {\n    const magic3 = 3;\n    if (dif === 'hard') {\n      return magic3;\n    }\n    if (dif === 'medium') {\n      return 2;\n    }\n    return 1;\n  }\n\n  render() {\n    const { answers, disabled, correctAnswer } = this.props;\n    return (\n      <div className=\"answers-div\">\n        {answers.map((el, index) => {\n          const answer = el === correctAnswer ? (\n            <Button\n              key={ index }\n              index={ index }\n              answerType=\"correct-answer\"\n              handleAnswer={ (e) => this.checkAnswer(e) }\n              isDisabled={ disabled }\n              element={ el }\n            />\n          ) : (\n            <Button\n              key={ index }\n              index={ index }\n              answerType=\"wrong-answer\"\n              handleAnswer={ (e) => this.checkAnswer(e) }\n              isDisabled={ disabled }\n              element={ el }\n            />\n          );\n          return answer;\n        })}\n      </div>\n    );\n  }\n}\n\nAnswerButtons.propTypes = {\n  answers: PropTypes.arrayOf(PropTypes.string).isRequired,\n  correctAnswer: PropTypes.string.isRequired,\n  disabled: PropTypes.bool.isRequired,\n  showResults: PropTypes.func.isRequired,\n  currentTimer: PropTypes.number.isRequired,\n  difficulty: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  currentTimer: state.userScoreReducer.timer,\n});\n\nexport default connect(mapStateToProps)(AnswerButtons);\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { unescape } from 'underscore';\nimport Counter from './Counter';\nimport AnswerButtons from './AnswerButtons';\n\nclass Question extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isButtonDisabled: false,\n      answers: [],\n      isCounterRunning: true,\n      counter: 0,\n    };\n    this.showResults = this.showResults.bind(this);\n    this.disableButton = this.disableButton.bind(this);\n    this.enableButton = this.enableButton.bind(this);\n    this.resetColor = this.resetColor.bind(this);\n    this.setAnswers = this.setAnswers.bind(this);\n    this.disableCounter = this.disableCounter.bind(this);\n    this.enableCounter = this.enableCounter.bind(this);\n    this.nextButton = this.nextButton.bind(this);\n    this.setCounter = this.setCounter.bind(this);\n  }\n\n  componentDidMount() {\n    this.setAnswers();\n    // this.hideNextBtn();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { question } = this.props;\n    if (question !== prevProps.question) {\n      this.setAnswers();\n    }\n  }\n\n  setCounter(number) {\n    this.setState({ counter: number });\n  }\n\n  setAnswers() {\n    const { correctAnswer, incorrectAnswers } = this.props;\n    const answers = [...incorrectAnswers, correctAnswer].some((el) => el === 'True') ? (\n      ['True', 'False']\n    ) : (\n      this.shuffleArray([...incorrectAnswers, correctAnswer])\n    );\n    this.setState((prevState) => ({\n      ...prevState,\n      answers,\n    }));\n  }\n\n  shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i -= 1) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  }\n\n  disableButton() {\n    this.setState({\n      isButtonDisabled: true,\n    });\n  }\n\n  enableButton() {\n    this.setState({\n      isButtonDisabled: false,\n    });\n  }\n\n  disableCounter() {\n    this.setState((prevState) => ({\n      ...prevState,\n      isCounterRunning: false,\n    }));\n  }\n\n  enableCounter() {\n    this.setState((prevState) => ({\n      ...prevState,\n      isCounterRunning: true,\n    }));\n  }\n\n  showResults() {\n    const { isCounterRunning } = this.state;\n    const wrongAnswers = document.querySelectorAll('.wrong-answer');\n    const correctAnswer = document.querySelector('.correct-answer');\n    correctAnswer.style.border = ('3px solid rgb(6, 240, 15)');\n    for (let i = 0; i < wrongAnswers.length; i += 1) {\n      wrongAnswers[i].style.border = ('3px solid rgb(255, 0, 0)');\n    }\n    this.disableButton();\n    this.showButton();\n    if (isCounterRunning) this.disableCounter();\n  }\n\n  showButton() {\n    document.getElementById('next').style.display = 'block';\n  }\n\n  hideButton() {\n    document.getElementById('next').style.display = 'none';\n  }\n\n  nextButton() {\n    const { nextQuestion } = this.props;\n    this.hideButton();\n    this.resetColor();\n    nextQuestion();\n    this.setAnswers();\n    this.enableButton();\n    this.enableCounter();\n  }\n\n  resetColor() {\n    const wrongAnswers = document.querySelectorAll('.wrong-answer');\n    const correctAnswer = document.querySelector('.correct-answer');\n\n    correctAnswer.style.border = ('1px solid grey');\n    for (let i = 0; i < wrongAnswers.length; i += 1) {\n      wrongAnswers[i].style.border = ('1px solid grey');\n    }\n  }\n\n  render() {\n    const { answers, isCounterRunning, isButtonDisabled } = this.state;\n    const { question, correctAnswer, category, difficulty } = this.props;\n    return (\n      <main className=\"question-all-div\">\n        <p\n          className=\"category-div\"\n          data-testid=\"question-category\"\n        >\n          {`Categoria: ${category}`}\n        </p>\n        <div className=\"question-answers-div\">\n          <h3\n            className=\"question-div\"\n            data-testid=\"question-text\"\n          >\n            {unescape(question)}\n          </h3>\n          <AnswerButtons\n            answers={ answers }\n            correctAnswer={ correctAnswer }\n            disabled={ isButtonDisabled }\n            showResults={ this.showResults }\n            difficulty={ difficulty }\n          />\n          <button\n            type=\"button\"\n            onClick={ this.nextButton }\n            data-testid=\"btn-next\"\n            style={ { display: 'none' } }\n            id=\"next\"\n          >\n            Próxima\n          </button>\n        </div>\n        <Counter\n          showResults={ this.showResults }\n          isRunning={ isCounterRunning }\n        />\n      </main>\n    );\n  }\n}\n\nQuestion.propTypes = {\n  correctAnswer: PropTypes.string.isRequired,\n  incorrectAnswers: PropTypes.arrayOf(PropTypes.string).isRequired,\n  question: PropTypes.string.isRequired,\n  category: PropTypes.string.isRequired,\n  nextQuestion: PropTypes.func.isRequired,\n  difficulty: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  currentTimer: state.userScoreReducer.timer,\n});\n\nexport default connect(mapStateToProps)(Question);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport md5 from 'crypto-js/md5';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport Header from '../components/Header';\nimport Question from '../components/Question';\n\nclass Trivia extends Component {\n  constructor() {\n    super();\n    this.state = {\n      imagemGravatar: '',\n      name: '',\n      idQuestion: 0,\n    };\n    this.handleEmail = this.handleEmail.bind(this);\n    this.addQuestionsToState = this.handleEmail.bind(this);\n    this.nextQuestion = this.nextQuestion.bind(this);\n  }\n\n  componentDidMount() {\n    this.handleEmail();\n  }\n\n  handleEmail() {\n    const { player } = JSON.parse(localStorage.getItem('state'));\n    const email = md5(player.gravatarEmail).toString();\n    const { name } = player;\n    this.setState({\n      imagemGravatar: `https://www.gravatar.com/avatar/${email}`,\n      name,\n    });\n  }\n\n  nextQuestion() {\n    this.setState((prevState) => ({\n      idQuestion: prevState.idQuestion + 1,\n    }));\n  }\n\n  render() {\n    const { questions } = this.props;\n    const { player: { score } } = JSON.parse(localStorage.getItem('state'));\n    const { imagemGravatar, name, idQuestion } = this.state;\n    const currentQuestion = questions[idQuestion];\n    if (questions.length === 0) return <Redirect to=\"/\" />;\n    if (currentQuestion === undefined) {\n      const { player } = JSON.parse(localStorage.getItem('state'));\n      const ranking = JSON.parse(localStorage.getItem('ranking'));\n      const d = ranking ? (\n        localStorage.setItem('ranking', JSON.stringify([...ranking, player]))\n      ) : localStorage.setItem('ranking', JSON.stringify([player]));\n      console.log(d);\n      return <Redirect to=\"/feedback\" />;\n    }\n    const {\n      question,\n      correct_answer: correctAnswers,\n      incorrect_answers: incorrectAnswers,\n      category,\n      difficulty,\n    } = currentQuestion;\n    // console.log(currentQuestion);\n    return (\n      <main>\n        <Header img={ imagemGravatar } playerName={ name } score={ score } />\n        <Question\n          question={ question }\n          correctAnswer={ correctAnswers }\n          incorrectAnswers={ incorrectAnswers }\n          category={ category }\n          difficulty={ difficulty }\n          nextQuestion={ () => this.nextQuestion() }\n        />\n        <div\n          className=\"next-button-div\"\n        >\n          {/* <button\n            type=\"button\"\n            onClick={ this.nextQuestion }\n            data-testid=\"btn-next\"\n            display={ buttonDisplay }\n          >\n            Próxima\n          </button> */}\n        </div>\n      </main>\n    );\n  }\n}\n\nTrivia.propTypes = {\n  // score: PropTypes.number.isRequired,\n  questions: PropTypes.arrayOf(PropTypes.any),\n};\n\nTrivia.defaultProps = {\n  questions: [],\n};\n\nconst mapStateToProps = (state) => ({\n  // score: state.userScoreReducer.score,\n  questions: state.questionsReducer.triviaQuestions,\n});\n\nexport default connect(mapStateToProps)(Trivia);\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { BiArrowBack } from 'react-icons/bi';\n\nexport default class PlayAgainButton extends Component {\n  render() {\n    return (\n      <Link to=\"/\">\n        <button data-testid=\"btn-play-again\" type=\"button\">\n          <BiArrowBack />\n          <span>Jogar novamente</span>\n        </button>\n      </Link>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { BiArrowBack } from 'react-icons/bi';\n\nexport default class RankingButton extends Component {\n  render() {\n    return (\n      <Link to=\"/ranking\">\n        <button data-testid=\"btn-ranking\" type=\"button\">\n          <BiArrowBack />\n          <span>Ver Ranking</span>\n        </button>\n      </Link>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport PlayAgainButton from '../components/PlayAgainButton';\nimport Header from '../components/Header';\nimport RankingButton from '../components/RankingButton';\n\nexport default class Feedback extends Component {\n  constructor(props) {\n    super(props);\n    this.feedbackMessage = this.feedbackMessage.bind(this);\n  }\n\n  feedbackMessage(assertions) {\n    const minValue = 3;\n    if (assertions < minValue) return 'Podia ser melhor...';\n    if (assertions >= minValue) return 'Mandou bem!';\n  }\n\n  render() {\n    const { player: { name, gravatarEmail, assertions, score } } = JSON.parse(localStorage\n      .getItem('state'));\n    const gravatar = `https://www.gravatar.com/avatar/${gravatarEmail}`;\n    return (\n      <main className=\"main-feedback-div\">\n        <Header img={ gravatar } playerName={ name } score={ score } />\n        <div className=\"feedback-div\">\n          <header className=\"feedback-header\">\n            <PlayAgainButton />\n            <RankingButton />\n            <h4 data-testid=\"header-player-name\">{ name }</h4>\n            <img\n              src={ gravatar }\n              alt=\"user avatar\"\n              data-testid=\"header-profile-picture\"\n            />\n          </header>\n          <div className=\"login-title\">\n            <span>Pontuação total</span>\n            <h2 data-testid=\"feedback-total-score\">{ score }</h2>\n          </div>\n          <div className=\"login-title\">\n            <span>Questões corretas</span>\n            <h2 data-testid=\"feedback-total-question\">{ assertions }</h2>\n          </div>\n          <div data-testid=\"feedback-text\">\n            <h3>{ this.feedbackMessage(assertions) }</h3>\n          </div>\n        </div>\n      </main>\n    );\n  }\n}\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\nexport default class Rank extends Component {\n  render() {\n    const { name, index, score, gravatar } = this.props;\n    return (\n      <div>\n        <span>\n          {index}\n          <img src={ `https://www.gravatar.com/avatar/${gravatar}` } alt=\"gravatarImage\" />\n          { name }\n          { score }\n        </span>\n      </div>\n    );\n  }\n}\n\nRank.propTypes = {\n  gravatar: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  score: PropTypes.string.isRequired,\n};\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Rank from '../components/Rank';\n\nclass Ranking extends Component {\n  render() {\n    const ranking = JSON.parse(localStorage.getItem('ranking'));\n    return (\n      <div>\n        <h3 data-testid=\"ranking-title\">Ranking</h3>\n        {ranking.map((el, index) => (<Rank\n          key={ `k${index}` }\n          nome={ el.name }\n          gravatar={ el.gravatarEmail }\n          score={ el.score }\n          index={ index }\n        />\n        ))}\n        <Link to=\"/\">\n          <button data-testid=\"btn-go-home\" type=\"button\">\n            Inicio\n          </button>\n        </Link>\n      </div>\n    );\n  }\n}\n\nexport default Ranking;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import actypes from '../actions/actionTypes';\n\nconst initialState = {\n  numberOfQuestions: 5,\n};\n\nfunction configReducer(state = initialState, action) {\n  switch (action.type) {\n  case actypes.SET_NUMBER_OF_QUESTION:\n    return {\n      ...state,\n      numberOfQuestions: action.numberOfQuestions,\n    };\n  default:\n    return state;\n  }\n}\n\nexport default configReducer;\n","import actypes from '../actions/actionTypes';\n\nconst initialState = {\n  triviaQuestions: [],\n};\n\nfunction questionsReducer(state = initialState, action) {\n  switch (action.type) {\n  case actypes.SAVE_QUESTIONS_ON_STORE:\n    return {\n      ...state,\n      triviaQuestions: action.questions,\n    };\n  default:\n    return state;\n  }\n}\n\nexport default questionsReducer;\n","import actypes from '../actions/actionTypes';\n\nconst INITIAL_STATE = {\n  score: 0,\n  timer: 0,\n};\n\nconst userScoreReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  // case actypes.ADD_SCORE:\n  //   return {\n  //     ...state,\n  //     score: state.score + 1,\n  //   };\n  case actypes.ADD_TIMER:\n    return {\n      ...state,\n      timer: action.timer,\n    };\n\n  default:\n    return state;\n  }\n};\n\nexport default userScoreReducer;\n","import { combineReducers } from 'redux';\nimport configReducer from './configReducer';\nimport questionsReducer from './questionsReducer';\nimport userScoreReducer from './userScoreReducer';\n\nconst rootReducer = combineReducers({\n  configReducer,\n  questionsReducer,\n  userScoreReducer,\n});\n\nexport default rootReducer;\n","import { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport './App.css';\nimport { Route, Switch } from 'react-router';\nimport Login from './pages/Login';\nimport Config from './pages/Config';\nimport NotFound from './pages/NotFound';\nimport Trivia from './pages/Trivia';\nimport Feedback from './pages/Feedback';\nimport Ranking from './pages/Ranking';\n// import logo from './trivia.png';\n\nexport default function App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={ Login } />\n      <Route exact path=\"/jogo\" component={ Trivia } />\n      <Route exact path=\"/config\" component={ Config } />\n      <Route exact path=\"/feedback\" component={ Feedback } />\n      <Route exact path=\"/ranking\" component={ Ranking } />\n      <Route exact path=\"*\" component={ NotFound } />\n    </Switch>\n  );\n}\n"],"sourceRoot":""}